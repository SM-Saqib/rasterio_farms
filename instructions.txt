
This exercise involves processing some satellite images in Python, to extract
data corresponding to specific farms and structure it in a way that could be
used for training an algorithm.

The satellite captures imagery in several bands of wavelength; the ones you'll
be using in this exercise are red, green, blue, and near-infrared (NIR).
In the "images" directory, each of the bands has a subdirectory, containing
image files in GeoTiff format, where the filename specifies the date (all
the bands have the same set of dates).  You will also compute an additional
value called NDVI ("normalized difference vegetation index" - this is a
measure of vegetation growth that's commonly used in remote sensing)
which is computed as follows:
NDVI = (NIR - red) / (NIR + red)

The "farms.csv" file contains a list of farms and their latitude/longitude
coordinates, as well as what crop they were growing during what period of
time.

The "example_code.py" file has a few lines of code showing how to read
the GeoTiff files and extract the part corresponding to a farm.

Suppose that we want to train an algorithm to recognize what crop was
growing in a pixel (in this example the crops are Corn, Wheat, and Cotton)
by looking at satellite imagery.  Each training example will be one pixel's
imagery over time, for all of the bands and NDVI, and the output will be
the crop label for that pixel.

Your task is to construct the matrix of training data.
task 1:
It should be a
three-dimensional matrix where the three dimensions are (pixel, band, date).
The bands should be ordered as (blue, green, red, NIR, NDVI), and the dates
should be ordered chronologically; the order of the pixels doesn't matter.
So, for example, matrix[n, 4, :] would be an array of all the NDVI values
for the nth pixel over time. 

task2:
 The dates of the images are not evenly
spaced in time, so you should use linear interpolation to get values for any
dates that are missing. 

task3:
 Dates that are outside the period from sowing to
harvest of a given farm should have the pixel values for all bands set to NaN.

task4:

You should also include an array of crop labels, one per pixel, in the same
order as the rows of the matrix.

In your submission you should include your code as well as the output
file(s) that it generated (you will need to choose what format to save the
data in).


